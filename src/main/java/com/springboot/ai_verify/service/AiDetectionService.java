package com.springboot.ai_verify.service;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

import java.util.List;
import java.util.Map;

@Service
public class AiDetectionService {

    private final WebClient webClient;
    private final ObjectMapper objectMapper;

    @Value("${mistralmodel.api.url}")
    private String mistralApiUrl;

    @Value("${mistralmodel.api.key}")
    private String mistralApiKey;

    private static final String SYSTEM_PROMPT = """
        Analyze the given text and assess the likelihood that it was generated by an AI versus a human. 
        Use a multifaceted evaluation strategy based on natural language features, writing dynamics, and 
        thematic coherence. The assessment must be grounded in the following metrics and considerations:
        Evaluation Metrics:
        - Perplexity (0–100): Measures how predictable the text is. AI-generated content typically uses highly probable next-word predictions, leading to lower perplexity scores (e.g., 0–40). Human writing often introduces less predictable language, creative phrasings, idioms, and interruptions that result in higher perplexity (e.g., 40–70). Very high perplexity (>70) may indicate incoherence or randomness, suggesting either low-quality AI output or disorganized human writing.
        - Burstiness (0–100): Evaluates variance in sentence structure, length, punctuation, and rhythm. Human writers tend to have irregular patterns, mixing short and long sentences and switching between formal and informal tones. This results in high burstiness (60–100). AI-generated content often exhibits low burstiness (20–50), maintaining consistent sentence length and syntactic simplicity.
        - Consistency (0–100): Reflects the thematic and stylistic steadiness of the text. AI text is often overly consistent, staying narrowly on topic, rarely diverging in tone or context (scoring 70–100). Human writing often shifts tone, introduces side thoughts, and shows personal bias or emotion, which lowers consistency (30–60). Extremely low consistency (<30) may indicate lack of focus or clarity.
        
        Provide ONLY a JSON response in this exact format, with no other text or explanations before or after the JSON block:
        {
          "probability": 0-100,
          "metrics": {
            "perplexity": 0-100,
            "burstiness": 0-100,
            "consistency": 0-100
          },
          "patterns": ["pattern1", "pattern2", ...],
          "analysis": "Detailed explanation of the findings, summarizing why the text is likely AI or human-written based on the metrics."
        }
        """;

    public AiDetectionService(WebClient.Builder webClientBuilder, ObjectMapper objectMapper) {
        this.webClient = webClientBuilder.build();
        this.objectMapper = objectMapper;
    }

    public Mono<String> detectAiContent(String textToAnalyze) {
        Map<String, Object> payload = Map.of("inputs", textToAnalyze);

        return webClient.post()
                .uri(mistralApiUrl)
                .header(HttpHeaders.AUTHORIZATION, "Bearer " + mistralApiKey)
                .contentType(MediaType.APPLICATION_JSON)
                .bodyValue(payload)
                .retrieve()
                .bodyToMono(String.class)
                .map(this::processHuggingFaceResponse)
                .onErrorResume(e -> {
                    System.err.println("Error calling Mistral Face API: " + e.getMessage());
                    return Mono.just("{\"error\": \"Failed to get analysis from the AI model. Please try again later.\"}");
                });
    }

    private String processHuggingFaceResponse(String apiResponse) {
        try {
            List<List<Map<String, Object>>> responseList = objectMapper.readValue(apiResponse, List.class);
            if (responseList != null && !responseList.isEmpty()) {
                List<Map<String, Object>> predictions = responseList.get(0);
                double aiScore = 0.0;
                for (Map<String, Object> prediction : predictions) {
                    String label = (String) prediction.get("label");
                    if ("Fake".equals(label)) { // Assuming "Fake" indicates AI-generated
                        aiScore = ((Number) prediction.get("score")).doubleValue() * 100;
                        break;
                    }
                }
                // Map Hugging Face output to required format
                return objectMapper.writeValueAsString(Map.of(
                        "probability", (int) Math.round(aiScore),
                        "metrics", Map.of(
                                "perplexity", calculatePerplexity(aiScore),
                                "burstiness", calculateBurstiness(aiScore),
                                "consistency", calculateConsistency(aiScore)
                        ),
                        "patterns", List.of("predictable_phrasing", "consistent_structure"),
                        "analysis", generateAnalysis(aiScore)
                ));
            }
        } catch (JsonProcessingException | ClassCastException e) {
            System.err.println("Error parsing JSON from Hugging Face response: " + e.getMessage());
            return "{\"error\": \"Invalid format received from AI model.\"}";
        }
        return "{\"error\": \"No content found in AI model response.\"}";
    }

    private int calculatePerplexity(double aiScore) {
        // Simplified mapping: lower AI score means higher perplexity (more human-like)
        return (int) (70 - (aiScore * 0.3));
    }

    private int calculateBurstiness(double aiScore) {
        // Lower AI score means higher burstiness (more human-like)
        return (int) (60 + (1 - aiScore) * 40);
    }

    private int calculateConsistency(double aiScore) {
        // Higher AI score means higher consistency (more AI-like)
        return (int) (30 + aiScore * 70);
    }

    private String generateAnalysis(double aiScore) {
        if (aiScore > 70) {
            return "The text exhibits low perplexity and high consistency, typical of AI-generated content. Sentence structures are uniform, with minimal variation in tone or style.";
        } else if (aiScore < 30) {
            return "The text shows high perplexity and burstiness, indicative of human writing. It includes varied sentence structures and thematic shifts.";
        } else {
            return "The text has mixed characteristics, with moderate perplexity and burstiness, making it challenging to definitively classify as AI or human-written.";
        }
    }
}